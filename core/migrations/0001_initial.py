# Generated by Django 5.2.3 on 2025-10-04 15:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('employee_code', models.CharField(max_length=20, unique=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocationSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField(help_text='Порядковый номер слота внутри локации (1..slot_count)')),
                ('code', models.CharField(max_length=80, unique=True)),
                ('size_class', models.CharField(choices=[('pallet', 'Pallet-size'), ('crate', 'Crate-size'), ('drum', 'Drum-size'), ('box', 'Box-size'), ('tote', 'Tote-size')], max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['location_id', 'index'],
            },
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SKU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=40, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('unit_of_measurement', models.CharField(default='pcs', max_length=16)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('auto_assign_enabled', models.BooleanField(default=True)),
                ('default_priority', models.PositiveSmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_active', 'name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeShiftStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_busy', models.BooleanField(default=False)),
                ('task_count', models.IntegerField(default=0)),
                ('shift_score', models.IntegerField(default=0)),
                ('last_task_at', models.DateTimeField(blank=True, null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shift_stats', to='core.employee')),
            ],
            options={
                'ordering': ['-shift_score', 'task_count', 'employee_id'],
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='qualifications',
            field=models.ManyToManyField(blank=True, to='core.qualification'),
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=120)),
                ('date', models.DateField(db_index=True)),
                ('is_active', models.BooleanField(db_index=True, default=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employees', models.ManyToManyField(blank=True, related_name='shifts', through='core.EmployeeShiftStats', to='core.employee')),
            ],
            options={
                'ordering': ['-date', '-start_time', 'id'],
            },
        ),
        migrations.AddField(
            model_name='employeeshiftstats',
            name='shift',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_stats', to='core.shift'),
        ),
        migrations.CreateModel(
            name='Cargo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku_name_snapshot', models.CharField(blank=True, max_length=255)),
                ('cargo_code', models.CharField(max_length=50, unique=True)),
                ('container_type', models.CharField(choices=[('pallet', 'Паллет'), ('crate', 'Ящик'), ('drum', 'Бочка'), ('box', 'Коробка'), ('tote', 'Сумка')], default='pallet', max_length=16)),
                ('units', models.PositiveIntegerField(default=1)),
                ('weight_kg', models.FloatField(default=0)),
                ('volume_m3', models.FloatField(default=0)),
                ('status', models.CharField(choices=[('created', 'Создан'), ('arrived', 'Поступил'), ('stored', 'Размещён'), ('dispatched', 'Отгружен')], db_index=True, default='created', max_length=16)),
                ('handling_state', models.CharField(choices=[('idle', 'Ожидает'), ('processing', 'Обрабатывается')], db_index=True, default='idle', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_slot', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cargo', to='core.locationslot')),
                ('sku', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cargos', to='core.sku')),
            ],
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64, unique=True)),
                ('location_type', models.CharField(choices=[('inbound', 'Inbound dock'), ('staging', 'Staging area'), ('rack', 'Rack/bin'), ('pick', 'Pick face'), ('outbound', 'Outbound dock'), ('qc', 'Quality control')], default='rack', max_length=16)),
                ('zone', models.CharField(blank=True, max_length=16)),
                ('aisle', models.CharField(blank=True, max_length=16)),
                ('rack', models.CharField(blank=True, max_length=16)),
                ('shelf', models.CharField(blank=True, max_length=16)),
                ('bin', models.CharField(blank=True, max_length=16)),
                ('slot_count', models.PositiveSmallIntegerField(default=1)),
                ('slot_size_class', models.CharField(choices=[('pallet', 'Pallet-size'), ('crate', 'Crate-size'), ('drum', 'Drum-size'), ('box', 'Box-size'), ('tote', 'Tote-size')], default='pallet', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['zone', 'aisle', 'rack', 'shelf', 'bin', 'code'],
                'indexes': [models.Index(fields=['location_type'], name='core_storag_locatio_9e1e9d_idx'), models.Index(fields=['zone', 'aisle', 'rack'], name='core_storag_zone_31dde1_idx')],
            },
        ),
        migrations.AddField(
            model_name='locationslot',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='core.storagelocation'),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField()),
                ('task_type', models.CharField(choices=[('RECEIVE_TO_INBOUND', 'Receive to inbound'), ('PUTAWAY_TO_RACK', 'Putaway to rack'), ('MOVE_BETWEEN_SLOTS', 'Move between slots'), ('DISPATCH_CARGO', 'Dispatch cargo')], db_index=True, max_length=40)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In progress'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('priority', models.PositiveSmallIntegerField(default=0, help_text='0..n, выше — важнее')),
                ('difficulty', models.PositiveSmallIntegerField(default=1)),
                ('estimated_minutes', models.PositiveIntegerField(default=0)),
                ('actual_minutes', models.PositiveIntegerField(default=0)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('external_ref', models.CharField(blank=True, max_length=64, null=True)),
                ('source', models.CharField(choices=[('manual', 'manual'), ('auto', 'auto')], default='auto', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.employee')),
                ('cargo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.cargo')),
                ('required_qualifications', models.ManyToManyField(blank=True, to='core.qualification')),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='core.shift')),
                ('task_pool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='core.taskpool')),
            ],
            options={
                'ordering': ('-priority', 'due_at', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TaskAssignmentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('note', models.TextField(blank=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.employee')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_history', to='core.task')),
            ],
            options={
                'ordering': ['-timestamp', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CargoEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('created', 'Создание'), ('arrived', 'Поступление'), ('stored', 'Размещение'), ('moved', 'Перемещение'), ('picked', 'Отбор'), ('dispatched', 'Отгрузка'), ('qc', 'Контроль'), ('note', 'Заметка')], max_length=16)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('note', models.TextField(blank=True)),
                ('cargo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.cargo')),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.employee')),
                ('from_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_from', to='core.locationslot')),
                ('to_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events_to', to='core.locationslot')),
            ],
            options={
                'ordering': ['-timestamp', 'id'],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='core_cargoe_event_t_84ca8c_idx'), models.Index(fields=['cargo', 'timestamp'], name='core_cargoe_cargo_i_25b21c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['employee_code'], name='core_employ_employe_164f66_idx'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['last_name', 'first_name'], name='core_employ_last_na_5549e9_idx'),
        ),
        migrations.AddIndex(
            model_name='shift',
            index=models.Index(fields=['date', 'is_active'], name='core_shift_date_cda6d5_idx'),
        ),
        migrations.AddIndex(
            model_name='shift',
            index=models.Index(fields=['-start_time'], name='core_shift_start_t_43cca7_idx'),
        ),
        migrations.AddConstraint(
            model_name='shift',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__isnull', True), ('start_time__isnull', False), _connector='OR'), name='shift_end_requires_start'),
        ),
        migrations.AddConstraint(
            model_name='shift',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__isnull', True), ('end_time__gte', models.F('start_time')), _connector='OR'), name='shift_end_after_start'),
        ),
        migrations.AddIndex(
            model_name='employeeshiftstats',
            index=models.Index(fields=['shift', 'is_busy'], name='core_employ_shift_i_4a5b0b_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeshiftstats',
            index=models.Index(fields=['employee', 'shift'], name='core_employ_employe_7eb240_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeshiftstats',
            index=models.Index(fields=['-shift_score', 'task_count'], name='core_employ_shift_s_eddeea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='employeeshiftstats',
            unique_together={('employee', 'shift')},
        ),
        migrations.AddIndex(
            model_name='cargo',
            index=models.Index(fields=['status', 'current_slot'], name='core_cargo_status_a9cbd5_idx'),
        ),
        migrations.AddIndex(
            model_name='cargo',
            index=models.Index(fields=['sku'], name='core_cargo_sku_id_46740e_idx'),
        ),
        migrations.AddConstraint(
            model_name='cargo',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('status', 'dispatched'), _negated=True), ('current_slot__isnull', True), _connector='OR'), name='cargo_dispatched_without_slot'),
        ),
        migrations.AddConstraint(
            model_name='cargo',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('current_slot__isnull', True), ('status', 'created')), models.Q(('status', 'created'), _negated=True), _connector='OR'), name='cargo_created_requires_no_slot'),
        ),
        migrations.AddConstraint(
            model_name='cargo',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('handling_state', 'idle'), ('status', 'dispatched')), models.Q(('status', 'dispatched'), _negated=True), _connector='OR'), name='cargo_dispatched_handling_is_idle'),
        ),
        migrations.AddIndex(
            model_name='locationslot',
            index=models.Index(fields=['location', 'index'], name='core_locati_locatio_c42aac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='locationslot',
            unique_together={('location', 'index')},
        ),
        migrations.AddIndex(
            model_name='taskassignmentlog',
            index=models.Index(fields=['task', 'timestamp'], name='core_taskas_task_id_297b23_idx'),
        ),
        migrations.AddIndex(
            model_name='taskassignmentlog',
            index=models.Index(fields=['employee', 'timestamp'], name='core_taskas_employe_92ed1e_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['shift', 'status'], name='core_task_shift_i_b257b4_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status', 'priority', 'due_at'], name='core_task_status_7b7e2b_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='core_task_assigne_5bfa1c_idx'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('difficulty__gte', 1), ('difficulty__lte', 5)), name='task_difficulty_1_5'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('due_at__isnull', True), ('due_at__gte', models.F('created_at')), _connector='OR'), name='task_due_after_created'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['in_progress', 'paused'])), fields=('assigned_to',), name='unique_active_task_per_employee'),
        ),
    ]
