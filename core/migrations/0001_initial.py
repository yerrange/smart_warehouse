# Generated by Django 5.2.3 on 2025-09-11 10:19

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cargo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('cargo_code', models.CharField(max_length=50, unique=True)),
                ('weight_kg', models.FloatField()),
                ('volume_m3', models.FloatField()),
                ('packages_count', models.IntegerField(default=1)),
                ('is_dangerous', models.BooleanField(default=False)),
                ('requires_cold_storage', models.BooleanField(default=False)),
                ('fragile', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('standard', 'Стандартный'), ('food', 'Пищевой'), ('electronic', 'Электроника'), ('chemical', 'Химия'), ('medical', 'Медицинский'), ('other', 'Другое')], default='standard', max_length=50)),
                ('origin', models.CharField(blank=True, max_length=100)),
                ('current_status', models.CharField(choices=[('created', 'Создан'), ('arrived', 'Поступил на склад'), ('stored', 'Размещён'), ('processing', 'Обрабатывается'), ('dispatched', 'Отгружен')], default='created', max_length=30)),
                ('location', models.CharField(blank=True, help_text='Произвольное описание местоположения груза (например, зона A3, полка 5)', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Общий пул', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('employee_code', models.CharField(max_length=20, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('qualifications', models.ManyToManyField(blank=True, to='core.qualification')),
            ],
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('employees', models.ManyToManyField(related_name='shifts', to='core.employee')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In progress'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('priority', models.PositiveSmallIntegerField(default=0, help_text='0..n, выше — важнее')),
                ('difficulty', models.PositiveSmallIntegerField(default=1)),
                ('estimated_minutes', models.PositiveIntegerField(default=0)),
                ('actual_minutes', models.PositiveIntegerField(default=0)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('external_ref', models.CharField(blank=True, max_length=64, null=True)),
                ('source', models.CharField(choices=[('manual', 'manual'), ('auto', 'auto')], default='auto', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.employee')),
                ('cargo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.cargo')),
                ('required_qualifications', models.ManyToManyField(blank=True, to='core.qualification')),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='core.shift')),
                ('task_pool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='core.taskpool')),
            ],
            options={
                'ordering': ('-priority', 'due_at', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TaskAssignmentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(blank=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.employee')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_history', to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeShiftStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_count', models.IntegerField(default=0)),
                ('shift_score', models.IntegerField(default=0)),
                ('is_busy', models.BooleanField(default=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shift_stats', to='core.employee')),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_stats', to='core.shift')),
            ],
            options={
                'unique_together': {('employee', 'shift')},
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['shift', 'status'], name='core_task_shift_i_b257b4_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status', 'priority', 'due_at'], name='core_task_status_7b7e2b_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='core_task_assigne_5bfa1c_idx'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('difficulty__gte', 1), ('difficulty__lte', 5)), name='task_difficulty_1_5'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('due_at__isnull', True), ('due_at__gte', models.F('created_at')), _connector='OR'), name='task_due_after_created'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['in_progress', 'paused'])), fields=('assigned_to',), name='unique_active_task_per_employee'),
        ),
    ]
