import os
import time
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "smart_warehouse.settings")
django.setup()

from django.db import transaction
from django.db.models import Q
from django.utils import timezone

from core.models import Task, Shift
from core.services.tasks import assign_task_to_best_employee  # <-- –≤–∞–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç

CHECK_INTERVAL_SEC = int(os.getenv("AI_DEMON_INTERVAL", "5"))


def eligible_active_shifts(now):
    """–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö end_time –Ω–µ –ø—Ä–æ—à—ë–ª (–∏–ª–∏ –Ω–µ—Ç) –∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏."""
    qs = (
        Shift.objects.filter(is_active=True)
        .filter(Q(end_time__isnull=True) | Q(end_time__gt=now))
        .filter(employees__isnull=False)
        .distinct()
        .order_by("end_time")
    )
    return list(qs)


def pool_tasks(batch_size=100):
    """–ó–∞–¥–∞—á–∏ –∏–∑ –ø—É–ª–∞: –æ–∂–∏–¥–∞—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –±–µ–∑ —Å–º–µ–Ω—ã."""
    return list(
        Task.objects.filter(status="pending", shift__isnull=True)
        .order_by("id")[:batch_size]
    )


def try_assign_task_to_some_shift(task_id: int, shifts: list[Shift]) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–º–µ–Ω –∏ —Å—Ä–∞–∑—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å (—Å–º–µ–Ω–∞ + —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã).
    """
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–º–µ–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for sh in shifts:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã (–º–æ–≥–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è)
        if sh.end_time and sh.end_time <= timezone.now():
            continue

        try:
            with transaction.atomic():
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –≤—Å—ë –µ—â—ë –≤ –ø—É–ª–µ
                task = (
                    Task.objects.select_for_update()
                    .select_related("shift")
                    .get(pk=task_id)
                )
                if task.status != "pending" or task.shift_id is not None:
                    return False  # –∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª—Å—è —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π

                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–º–µ–Ω—É
                updated = (
                    Task.objects
                    .filter(pk=task.pk, status="pending", shift__isnull=True)
                    .update(shift=sh)
                )
                if not updated:
                    return False  # –≥–æ–Ω–∫–∞, –∑–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å

                # –û–±–Ω–æ–≤–∏–º –∏–Ω—Å—Ç–∞–Ω—Å (—É task.shift –µ—â—ë None)
                task.shift_id = sh.id
                task.shift = sh

                # –ü—Ä–æ–±—É–µ–º –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ª—É—á—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                ok = assign_task_to_best_employee(task, sh)
                if ok:
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id}: —Å–º–µ–Ω–∞ #{sh.id} –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")
                    return True

                # –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí –≤–µ—Ä–Ω—ë–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª
                Task.objects.filter(pk=task.pk, shift=sh).update(shift=None)
                print(f"‚è∏ –ó–∞–¥–∞—á–∞ #{task.id}: –≤ —Å–º–µ–Ω–µ #{sh.id} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –ø—É–ª")
                # –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–º–µ–Ω—É

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ #{task_id} —Å–æ —Å–º–µ–Ω–æ–π #{sh.id}: {e}")

    # –ù–∏ –≤ –æ–¥–Ω–æ–π —Å–º–µ–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    return False


def tick_once() -> int:
    now = timezone.now()
    shifts = eligible_active_shifts(now)
    if not shifts:
        print("‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ —Ç–∏–∫–∞.")
        return 0

    tasks = pool_tasks()
    if not tasks:
        print("‚ÑπÔ∏è  –ü—É–ª –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫ —Ç–∏–∫–∞.")
        return 0

    success = 0
    for t in tasks:
        if try_assign_task_to_some_shift(t.id, shifts):
            success += 1
    return success


def loop():
    print(f"üß† AI-–¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL_SEC} —Å–µ–∫.")
    while True:
        try:
            n = tick_once()
            if n:
                print(f"üì¶ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞—á (—Å–º–µ–Ω–∞+—Å–æ—Ç—Ä—É–¥–Ω–∏–∫): {n}")
        except Exception as e:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞:", e)
        time.sleep(CHECK_INTERVAL_SEC)


if __name__ == "__main__":
    loop()
